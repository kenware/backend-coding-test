'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
const swagger_json_1 = __importDefault(require("../swagger.json"));
const app = express_1.default();
const body_parser_1 = __importDefault(require("body-parser"));
const jsonParser = body_parser_1.default.json();
const appModule = (db) => {
    app.get('/health', (req, res) => res.send('Healthy'));
    app.use('/swagger-api-docs', swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(swagger_json_1.default));
    app.post('/rides', jsonParser, (req, res) => {
        const startLatitude = Number(req.body.start_lat);
        const startLongitude = Number(req.body.start_long);
        const endLatitude = Number(req.body.end_lat);
        const endLongitude = Number(req.body.end_long);
        const riderName = req.body.rider_name;
        const driverName = req.body.driver_name;
        const driverVehicle = req.body.driver_vehicle;
        if (startLatitude < -90 || startLatitude > 90 || startLongitude < -180 || startLongitude > 180) {
            return res.send({
                error_code: 'VALIDATION_ERROR',
                message: 'Start latitude and longitude must be between -90 - 90 and -180 to 180 degrees respectively'
            });
        }
        if (endLatitude < -90 || endLatitude > 90 || endLongitude < -180 || endLongitude > 180) {
            return res.send({
                error_code: 'VALIDATION_ERROR',
                message: 'End latitude and longitude must be between -90 - 90 and -180 to 180 degrees respectively'
            });
        }
        if (typeof riderName !== 'string' || riderName.length < 1) {
            return res.send({
                error_code: 'VALIDATION_ERROR',
                message: 'Rider name must be a non empty string'
            });
        }
        if (typeof driverName !== 'string' || driverName.length < 1) {
            return res.send({
                error_code: 'VALIDATION_ERROR',
                message: 'Rider name must be a non empty string'
            });
        }
        if (typeof driverVehicle !== 'string' || driverVehicle.length < 1) {
            return res.send({
                error_code: 'VALIDATION_ERROR',
                message: 'Rider name must be a non empty string'
            });
        }
        var values = [req.body.start_lat, req.body.start_long, req.body.end_lat, req.body.end_long, req.body.rider_name, req.body.driver_name, req.body.driver_vehicle];
        const result = db.run('INSERT INTO Rides(startLat, startLong, endLat, endLong, riderName, driverName, driverVehicle) VALUES (?, ?, ?, ?, ?, ?, ?)', values, function (err) {
            if (err) {
                return res.send({
                    error_code: 'SERVER_ERROR',
                    message: 'Unknown error'
                });
            }
            db.all('SELECT * FROM Rides WHERE rideID = ?', this.lastID, function (err, rows) {
                if (err) {
                    return res.send({
                        error_code: 'SERVER_ERROR',
                        message: 'Unknown error'
                    });
                }
                res.send(rows);
            });
        });
    });
    app.get('/rides', (req, res) => {
        db.all('SELECT * FROM Rides', function (err, rows) {
            if (err) {
                return res.send({
                    error_code: 'SERVER_ERROR',
                    message: 'Unknown error'
                });
            }
            if (rows.length === 0) {
                return res.send({
                    error_code: 'RIDES_NOT_FOUND_ERROR',
                    message: 'Could not find any rides'
                });
            }
            res.send(rows);
        });
    });
    app.get('/rides/:id', (req, res) => {
        db.all(`SELECT * FROM Rides WHERE rideID='${req.params.id}'`, function (err, rows) {
            if (err) {
                return res.send({
                    error_code: 'SERVER_ERROR',
                    message: 'Unknown error'
                });
            }
            if (rows.length === 0) {
                return res.send({
                    error_code: 'RIDES_NOT_FOUND_ERROR',
                    message: 'Could not find any rides'
                });
            }
            res.send(rows);
        });
    });
    return app;
};
exports.default = appModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7O0FBRWIsc0RBQThCO0FBQzlCLDRFQUEyQztBQUMzQyxtRUFBOEM7QUFDOUMsTUFBTSxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFDO0FBRXRCLDhEQUFxQztBQUNyQyxNQUFNLFVBQVUsR0FBRyxxQkFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0FBR3JDLE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDckIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFFdEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSw0QkFBUyxDQUFDLEtBQUssRUFBRSw0QkFBUyxDQUFDLEtBQUssQ0FBQyxzQkFBZSxDQUFDLENBQUMsQ0FBQztJQUVoRixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDeEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakQsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFD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QyxDQUFDO0FBRUYsa0JBQWUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBzd2FnZ2VyVWkgZnJvbSAnc3dhZ2dlci11aS1leHByZXNzJztcbmltcG9ydCBzd2FnZ2VyRG9jdW1lbnQgZnJvbSAnLi4vc3dhZ2dlci5qc29uJztcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuY29uc3QganNvblBhcnNlciA9IGJvZHlQYXJzZXIuanNvbigpO1xuXG5cbmNvbnN0IGFwcE1vZHVsZSA9IChkYikgPT4ge1xuICAgIGFwcC5nZXQoJy9oZWFsdGgnLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKCdIZWFsdGh5JykpO1xuXG4gICAgYXBwLnVzZSgnL3N3YWdnZXItYXBpLWRvY3MnLCBzd2FnZ2VyVWkuc2VydmUsIHN3YWdnZXJVaS5zZXR1cChzd2FnZ2VyRG9jdW1lbnQpKTtcblxuICAgIGFwcC5wb3N0KCcvcmlkZXMnLCBqc29uUGFyc2VyLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRMYXRpdHVkZSA9IE51bWJlcihyZXEuYm9keS5zdGFydF9sYXQpO1xuICAgICAgICBjb25zdCBzdGFydExvbmdpdHVkZSA9IE51bWJlcihyZXEuYm9keS5zdGFydF9sb25nKTtcbiAgICAgICAgY29uc3QgZW5kTGF0aXR1ZGUgPSBOdW1iZXIocmVxLmJvZHkuZW5kX2xhdCk7XG4gICAgICAgIGNvbnN0IGVuZExvbmdpdHVkZSA9IE51bWJlcihyZXEuYm9keS5lbmRfbG9uZyk7XG4gICAgICAgIGNvbnN0IHJpZGVyTmFtZSA9IHJlcS5ib2R5LnJpZGVyX25hbWU7XG4gICAgICAgIGNvbnN0IGRyaXZlck5hbWUgPSByZXEuYm9keS5kcml2ZXJfbmFtZTtcbiAgICAgICAgY29uc3QgZHJpdmVyVmVoaWNsZSA9IHJlcS5ib2R5LmRyaXZlcl92ZWhpY2xlO1xuXG4gICAgICAgIGlmIChzdGFydExhdGl0dWRlIDwgLTkwIHx8IHN0YXJ0TGF0aXR1ZGUgPiA5MCB8fCBzdGFydExvbmdpdHVkZSA8IC0xODAgfHwgc3RhcnRMb25naXR1ZGUgPiAxODApIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7XG4gICAgICAgICAgICAgICAgZXJyb3JfY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdGFydCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIG11c3QgYmUgYmV0d2VlbiAtOTAgLSA5MCBhbmQgLTE4MCB0byAxODAgZGVncmVlcyByZXNwZWN0aXZlbHknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmRMYXRpdHVkZSA8IC05MCB8fCBlbmRMYXRpdHVkZSA+IDkwIHx8IGVuZExvbmdpdHVkZSA8IC0xODAgfHwgZW5kTG9uZ2l0dWRlID4gMTgwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoe1xuICAgICAgICAgICAgICAgIGVycm9yX2NvZGU6ICdWQUxJREFUSU9OX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRW5kIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIC05MCAtIDkwIGFuZCAtMTgwIHRvIDE4MCBkZWdyZWVzIHJlc3BlY3RpdmVseSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiByaWRlck5hbWUgIT09ICdzdHJpbmcnIHx8IHJpZGVyTmFtZS5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoe1xuICAgICAgICAgICAgICAgIGVycm9yX2NvZGU6ICdWQUxJREFUSU9OX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUmlkZXIgbmFtZSBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkcml2ZXJOYW1lICE9PSAnc3RyaW5nJyB8fCBkcml2ZXJOYW1lLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7XG4gICAgICAgICAgICAgICAgZXJyb3JfY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdSaWRlciBuYW1lIG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGRyaXZlclZlaGljbGUgIT09ICdzdHJpbmcnIHx8IGRyaXZlclZlaGljbGUubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHtcbiAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiAnVkFMSURBVElPTl9FUlJPUicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1JpZGVyIG5hbWUgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YWx1ZXMgPSBbcmVxLmJvZHkuc3RhcnRfbGF0LCByZXEuYm9keS5zdGFydF9sb25nLCByZXEuYm9keS5lbmRfbGF0LCByZXEuYm9keS5lbmRfbG9uZywgcmVxLmJvZHkucmlkZXJfbmFtZSwgcmVxLmJvZHkuZHJpdmVyX25hbWUsIHJlcS5ib2R5LmRyaXZlcl92ZWhpY2xlXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGRiLnJ1bignSU5TRVJUIElOVE8gUmlkZXMoc3RhcnRMYXQsIHN0YXJ0TG9uZywgZW5kTGF0LCBlbmRMb25nLCByaWRlck5hbWUsIGRyaXZlck5hbWUsIGRyaXZlclZlaGljbGUpIFZBTFVFUyAoPywgPywgPywgPywgPywgPywgPyknLCB2YWx1ZXMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiAnU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Vua25vd24gZXJyb3InXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRiLmFsbCgnU0VMRUNUICogRlJPTSBSaWRlcyBXSEVSRSByaWRlSUQgPSA/JywgdGhpcy5sYXN0SUQsIGZ1bmN0aW9uIChlcnIsIHJvd3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiAnU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbmtub3duIGVycm9yJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXMuc2VuZChyb3dzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGFwcC5nZXQoJy9yaWRlcycsIChyZXEsIHJlcykgPT4ge1xuICAgICAgICBkYi5hbGwoJ1NFTEVDVCAqIEZST00gUmlkZXMnLCBmdW5jdGlvbiAoZXJyLCByb3dzKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfY29kZTogJ1NFUlZFUl9FUlJPUicsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbmtub3duIGVycm9yJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm93cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiAnUklERVNfTk9UX0ZPVU5EX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0NvdWxkIG5vdCBmaW5kIGFueSByaWRlcydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzLnNlbmQocm93cyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYXBwLmdldCgnL3JpZGVzLzppZCcsIChyZXEsIHJlcykgPT4ge1xuICAgICAgICBkYi5hbGwoYFNFTEVDVCAqIEZST00gUmlkZXMgV0hFUkUgcmlkZUlEPScke3JlcS5wYXJhbXMuaWR9J2AsIGZ1bmN0aW9uIChlcnIsIHJvd3MpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiAnU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Vua25vd24gZXJyb3InXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yX2NvZGU6ICdSSURFU19OT1RfRk9VTkRfRVJST1InLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnQ291bGQgbm90IGZpbmQgYW55IHJpZGVzJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXMuc2VuZChyb3dzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXBwO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwTW9kdWxlOyJdfQ==